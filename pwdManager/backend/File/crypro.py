# author: Xav1erW
# create date: 2022-4-16
# version: 1.0
# description: 
#   provide methods to encrypt and decrypt data using AES CBC mode
#   the encrypted data is presented in base64 format

from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import base64

def encryptJson(jsonStr:bytes, key:bytes, iv:bytes)->bytes:
    '''
    encrypt the json string using AES CBC mode
    :param jsonStr: the json string to be encrypted
    :param key: the key used to encrypt
    :param iv: the initialization vector (generated by the uuid[:16])
    :return: the encrypted string in base64 format
    '''
    aes = AES.new(key, AES.MODE_CBC, iv)
    ciphertext = aes.encrypt(pad(jsonStr, AES.block_size))
    return base64.b64encode(ciphertext)

def decryptJson(ciphertext:str, key:bytes, iv)->str:
    '''
    decrypt the json string using AES CBC mode
    :param ciphertext: the encrypted string in base64 format
    :param key: the key used to decrypt
    :param iv: the initialization vector (generated by the uuid[:16])
    :return: the decrypted json string
    '''
    ciphertext = base64.b64decode(ciphertext)
    aes = AES.new(key, AES.MODE_CBC, iv)
    return unpad(aes.decrypt(ciphertext), AES.block_size).decode('utf-8')